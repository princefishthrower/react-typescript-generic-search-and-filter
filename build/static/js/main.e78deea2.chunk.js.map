{"version":3,"sources":["components/Sorters.tsx","components/SearchInput.tsx","hooks/useDebounce.ts","components/WidgetCard.tsx","mock-data/widgets.ts","components/Filters.tsx","App.tsx","utils/genericSearch.ts","utils/genericFilter.ts","utils/genericSort.ts","serviceWorker.ts","index.tsx"],"names":["Sorters","props","object","onChangeSorter","htmlFor","className","id","onChange","event","target","value","split","defaultValue","Object","keys","map","key","SearchInput","useState","searchQuery","setSearchQuery","onChangeSearchQuery","debouncedSearchQuery","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","undefined","type","placeholder","aria-label","WidgetCard","title","description","rating","updated","created","isSpecialCard","fromNow","date","widgets","Date","Math","floor","random","Filters","filters","onChangeFilter","labelTruthy","labelFalsy","getRadioButton","isTruthyPicked","label","checked","x","filter","property","length","getChecked","App","query","setQuery","isDescending","activeSorter","setActiveSorter","activeFilters","setActiveFilters","resultWidgets","widget","properties","some","toString","toLowerCase","includes","genericSearch","every","sort","widgetA","widgetB","objectA","objectB","sorter","result","genericSort","href","changedFilterProperty","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e78deea2.chunk.js","sourcesContent":["import * as React from \"react\";\n\nexport interface ISortersProps<T> {\n  object: T;\n  onChangeSorter: (\n    sortProperty: keyof T,\n    isDescending: boolean\n  ) => void;\n}\n\nexport default function Sorters<T>(props: ISortersProps<T>) {\n  const { object, onChangeSorter } = props;\n  return (\n    <>\n      <label htmlFor=\"sorters\" className=\"mt-3\">Sorters! Try us too! (We also work!)</label>\n      <select\n        id=\"sorters\"\n        className=\"custom-select\"\n        onChange={(event) =>\n          onChangeSorter(\n            event.target.value.split(\",\")[0] as any,\n            event.target.value.split(\",\")[1] === \"true\"\n          )\n        }\n        defaultValue={[\"title\", \"true\"]}\n      >\n        {Object.keys(object).map((key) => {\n          if (!key) {\n            return <></>\n          }\n          return (\n            <>\n              <option\n                key={`${key}-true`}\n                value={[key, \"true\"]}\n              >\n                sort by '{key}' descending\n              </option>\n              <option\n                key={`${key}-false`}\n                value={[key, \"false\"]}\n              >\n                sort by '{key}' ascending\n              </option>\n            </>\n          );\n        })}\n      </select>\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport useDebounce from \"../hooks/useDebounce\";\n\nexport interface ISearchProps {\n  onChangeSearchQuery: (searchQuery: string) => void;\n}\n\nexport default function SearchInput(props: ISearchProps) {\n  const [searchQuery, setSearchQuery] = useState<string | undefined>();\n  const { onChangeSearchQuery } = props;\n  const debouncedSearchQuery = useDebounce(searchQuery, 250);\n\n  useEffect(() => {\n    if (debouncedSearchQuery !== undefined) {\n      onChangeSearchQuery(debouncedSearchQuery);\n    }\n  }, [debouncedSearchQuery, onChangeSearchQuery]);\n\n  return (\n    <>\n      <label htmlFor=\"search\" className=\"mt-3\">Search! Try me! (I work!)</label>\n      <input\n        id=\"search\"\n        className=\"form-control full-width\"\n        type=\"search\"\n        placeholder=\"Search...\"\n        aria-label=\"Search\"\n        onChange={(event) => setSearchQuery(event.target.value)}\n      />\n    </>\n  );\n}\n","import { useState, useEffect } from 'react';\n\n// Taken from https://dev.to/gabe_ragland/debouncing-with-react-hooks-jci\nexport default function useDebounce(value: any, delay: number) {\n\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(\n        () => {\n            const handler = setTimeout(() => {\n                setDebouncedValue(value);\n            }, delay);\n\n            return () => {\n                clearTimeout(handler);\n            };\n        }\n    );\n\n    return debouncedValue;\n}\n","import * as React from \"react\";\nimport Moment from \"react-moment\";\nimport IWidget from \"../interfaces/IWidget\";\n\nexport function WidgetCard(props: IWidget) {\n  const {\n    title,\n    description,\n    rating,\n    updated,\n    created,\n    id,\n    isSpecialCard,\n  } = props;\n  return (\n    <div className=\"col-12 p-3\">\n      <div className={isSpecialCard ? \"card specialCard\" : \"card\"}>\n        <div className=\"card-body\">\n          <h1 className=\"card-title\">{title}</h1>\n          <p className=\"card-text\">{description}</p>\n          <p className=\"card-text font-italic\">Rating: {rating}/10</p>\n        </div>\n        <div className=\"card-footer text-muted text-right\">\n          <span className=\"float-left\">#{id}</span> created:{\" \"}\n          <Moment fromNow date={created} />, updated:{\" \"}\n          <Moment fromNow date={updated} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import IWidget from \"../interfaces/IWidget\";\n\n// Typically this would come from an API call or similar. It's hardcoded here for easy illustration\nconst widgets: Array<IWidget> = [\n  {\n    title: \"I am title 1\",\n    description: \"cool description 1\",\n    id: 1,\n    rating: 10,\n    created: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    updated: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    isSpecialCard: false\n  },\n  {\n    title: \"Title 2\",\n    description: \"cool description 2\",\n    id: 2,\n    rating: 7,\n    created: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    updated: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    isSpecialCard: true\n  },\n  {\n    title: \"Title Three\",\n    description: \"another description\",\n    id: 3,\n    rating: 4,\n    created: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    updated: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    isSpecialCard: false\n  },\n  {\n    title: \"Title 4: I love generics\",\n    description: \"generics are awesome!\",\n    id: 4,\n    rating: 6,\n    created: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    updated: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    isSpecialCard: false\n  },\n  {\n    title: \"We also love TypeScript\",\n    description: \"Yes, TypeScript is also very cool\",\n    id: 5,\n    rating: 10,\n    created: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    updated: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    isSpecialCard: false\n  },\n  {\n    title: \"X\",\n    description: \"X\",\n    id: 6,\n    rating: 10,\n    created: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    updated: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    isSpecialCard: false\n  },\n  {\n    title: \"Y\",\n    description: \"Y\",\n    id: 7,\n    rating: 9,\n    created: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    updated: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    isSpecialCard: false\n  },\n  {\n    title: \"Z\",\n    description: \"Z\",\n    id: 8,\n    rating: 1,\n    created: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    updated: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    isSpecialCard: true\n  },\n  {\n    title: \"A\",\n    description: \"A\",\n    id: 9,\n    rating: 6,\n    created: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    updated: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    isSpecialCard: false\n  },\n  {\n    title: \"B\",\n    description: \"B\",\n    id: 10,\n    rating: 0,\n    created: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    updated: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    isSpecialCard: false\n  },\n  {\n    title: \"C\",\n    description: \"C\",\n    id: 11,\n    rating: 3,\n    created: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    updated: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    isSpecialCard: false\n  },\n  {\n    title: \"\",\n    description: \"I am the description. This card has an empty, i.e. 'falsy' title :(\",\n    id: 12,\n    rating: 5,\n    created: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    updated: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    isSpecialCard: false\n  },\n  {\n    title: \"I am the title. This card has an empty, i.e. 'falsy' description :(\",\n    description: \"\",\n    id: 13,\n    rating: 5,\n    created: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    updated: new Date(+new Date() - Math.floor(Math.random() * 10000000000)),\n    isSpecialCard: false\n  },\n];\n\nexport default widgets;\n","import * as React from \"react\";\nimport { ReactNode } from \"react\";\nimport IFilter from \"../interfaces/IFilter\";\n\nexport interface IFiltersProps<T> {\n  object: T;\n  filters: Array<IFilter<T>>;\n  onChangeFilter: (\n    filterProperty: keyof T,\n    checked: boolean,\n    isTruthyPicked: boolean\n  ) => void;\n}\n\nexport function Filters<T>(props: IFiltersProps<T>) {\n  const { object, filters, onChangeFilter } = props;\n\n  const labelTruthy = (\n    <>\n      is <b>truthy</b>\n    </>\n  );\n\n  const labelFalsy = (\n    <>\n      is <b>falsy</b>\n    </>\n  );\n\n  return (\n    <div className=\"p-1 my-2\">\n      <label className=\"mt-3\">Filters! Try us too! (We also work!)</label>\n      {Object.keys(object).map((key) => {\n        const getRadioButton = (isTruthyPicked: boolean): ReactNode => {\n          const id = isTruthyPicked\n            ? `radio-defined-${key}`\n            : `radio-not-defined-${key}`;\n          const label = isTruthyPicked\n            ? labelTruthy\n            : labelFalsy;\n\n          const getChecked = () => {\n            const x = filters.filter(x => x.property === key);\n            return x.length === 1 && x[0].isTruthyPicked === isTruthyPicked;\n          }\n\n          return (\n            <>\n              <input\n                type=\"radio\"\n                id={id}\n                value={key}\n                checked={getChecked()}\n                onChange={(event) =>\n                  onChangeFilter(key as any, event.target.checked, isTruthyPicked)\n                }\n                className={\"m-1 ml-3\"}\n              />\n              <label htmlFor={id}>\n                '{key}' {label}\n              </label>\n            </>\n          );\n        };\n\n        return (\n          <div key={key} className=\"input-group my-3\">\n            {getRadioButton(true)}\n            {getRadioButton(false)}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport Sorters from \"./components/Sorters\";\nimport SearchInput from \"./components/SearchInput\";\nimport { WidgetCard } from \"./components/WidgetCard\";\nimport IWidget from \"./interfaces/IWidget\";\nimport widgets from \"./mock-data/widgets\";\nimport { genericSort } from \"./utils/genericSort\";\nimport { genericSearch } from \"./utils/genericSearch\";\nimport { genericFilter } from \"./utils/genericFilter\";\nimport { Filters } from \"./components/Filters\";\nimport IFilter from \"./interfaces/IFilter\";\nimport ISorter from \"./interfaces/ISorter\";\n\nexport default function App() {\n  const [query, setQuery] = useState<string>(\"\");\n  const [activeSorter, setActiveSorter] = useState<ISorter<IWidget>>({\n    property: \"title\",\n    isDescending: true,\n  });\n  const [activeFilters, setActiveFilters] = useState<Array<IFilter<IWidget>>>(\n    []\n  );\n\n  const resultWidgets = widgets\n    .filter((widget) =>\n      genericSearch<IWidget>(widget, [\"title\", \"description\"], query)\n    )\n    .filter((widget) => genericFilter<IWidget>(widget, activeFilters))\n    .sort((widgetA, widgetB) =>\n      genericSort<IWidget>(widgetA, widgetB, activeSorter)\n    );\n\n  return (\n    <div className=\"container mx-auto my-2\">\n      <div className=\"my-3\">\n        <i>\n          From the blog post{\" \"}\n          <a href=\"https://chrisfrewin.com/blog/react-typescript-generic-search-sort-and-filters/\">\n            \"React and TypeScript: Generic Search, Sorters, and Filters\"\n          </a>\n          .\n        </i>\n      </div>\n      <SearchInput onChangeSearchQuery={(query) => setQuery(query)} />\n      <Sorters<IWidget>\n        object={widgets[0]}\n        onChangeSorter={(property, isDescending) => {\n          setActiveSorter({\n            property,\n            isDescending,\n          });\n        }}\n      />\n      <Filters<IWidget>\n        object={widgets[0]}\n        filters={activeFilters}\n        onChangeFilter={(changedFilterProperty, checked, isTruthyPicked) => {\n          checked\n            ? setActiveFilters([\n                ...activeFilters.filter(\n                  (filter) => filter.property !== changedFilterProperty\n                ),\n                { property: changedFilterProperty, isTruthyPicked },\n              ])\n            : setActiveFilters(\n                activeFilters.filter(\n                  (filter) => filter.property !== changedFilterProperty\n                )\n              );\n        }}\n      />\n      <h3>Results:</h3>\n      {resultWidgets.length > 0 && (\n        <div className=\"row\">\n          {resultWidgets.map((widget) => (\n            <WidgetCard key={widget.id} {...widget} />\n          ))}\n        </div>\n      )}\n      {resultWidgets.length === 0 && <p>No results found!</p>}\n    </div>\n  );\n}\n","// case insensitive search of n-number properties of type T\n// returns true if at least one of the property values includes the query value\nexport function genericSearch<T>(\n    object: T,\n    properties: Array<keyof T>,\n    query: string\n): boolean {\n\n    if (query === \"\") {\n        return true;\n    } \n\n    return properties.some((property) => {\n        const value = object[property];\n        if (typeof value === \"string\" || typeof value === \"number\") {\n            return value.toString().toLowerCase().includes(query.toLowerCase());\n        }\n        return false;\n    });\n}","import IFilter from \"../interfaces/IFilter\";\n\n// filter n properties for truthy or falsy values on type T (no effect if no filter selected)\nexport function genericFilter<T>(object: T, filters: Array<IFilter<T>>) {\n  // no filters; no effect - return true\n  if (filters.length === 0) {\n    return true;\n  }\n\n  return filters.every((filter) => {\n    return filter.isTruthyPicked ? object[filter.property] : !object[filter.property];\n  });\n}\n","import ISorter from \"../interfaces/ISorter\";\n\n// comparator function for any property within type T\n// works for: strings, numbers, and Dates (and is typed to accept only properties which are those types)\n// could be extended for other types but would need some custom comparison function here\nexport function genericSort<T>(\n  objectA: T,\n  objectB: T,\n  sorter: ISorter<T>\n) {\n  const result = () => {\n    if (objectA[sorter.property] > objectB[sorter.property]) {\n        return 1;\n    } else if (objectA[sorter.property] < objectB[sorter.property]) {\n        return -1;\n    } else {\n        return 0;\n    }\n  }\n\n  return sorter.isDescending ? result() * -1 : result();\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/styles.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}